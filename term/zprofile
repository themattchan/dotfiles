emulate sh
source ~/.profile
emulate zsh

# #
# # Executes commands at login pre-zshrc.
# #
# # Authors:
# #   Sorin Ionescu <sorin.ionescu@gmail.com>
# #

# #
# # Browser
# #

# if [[ "$OSTYPE" == darwin* ]]; then
#   export BROWSER='open'
# fi

# #
# # Editors
# #

# export EDITOR='nano'
# export VISUAL='nano'
# export PAGER='less'

# #
# # Language
# #

# if [[ -z "$LANG" ]]; then
#   export LANG='en_US.UTF-8'
# fi

# #
# # Paths
# #

# # Ensure path arrays do not contain duplicates.
# typeset -gU cdpath fpath mailpath path

# # Set the the list of directories that cd searches.
# # cdpath=(
# #   $cdpath
# # )

# # Set the list of directories that Zsh searches for programs.
# path=(
#   /usr/local/{bin,sbin}
#   $path
# )

# #
# # Less
# #

# # Set the default Less options.
# # Mouse-wheel scrolling has been disabled by -X (disable screen clearing).
# # Remove -X and -F (exit if the content fits on one screen) to enable it.
# export LESS='-F -g -i -M -R -S -w -X -z-4'

# # Set the Less input preprocessor.
# if (( $+commands[lesspipe.sh] )); then
#   export LESSOPEN='| /usr/bin/env lesspipe.sh %s 2>&-'
# fi

# #
# # Temporary Files
# #

# if [[ ! -d "$TMPDIR" ]]; then
#   export TMPDIR="/tmp/$USER"
#   mkdir -p -m 700 "$TMPDIR"
# fi

# TMPPREFIX="${TMPDIR%/}/zsh"
# if [[ ! -d "$TMPPREFIX" ]]; then
#   mkdir -p "$TMPPREFIX"
# fi

export PATH="$HOME/.cargo/bin:$PATH"
export GPG_TTY=$(tty)


if [ -e /Users/matt/.nix-profile/etc/profile.d/nix.sh ]; then
    source /Users/matt/.nix-profile/etc/profile.d/nix.sh;
    export NIX_REMOTE=

    NIX_PATH="nixpkgs=/nix/store/qk1q2rwq9qzhi49hx7whji90bqk8kf9y-nixpkgs-7ae9da426924537755ce9164fd5b5f81ce16a1c3-src:${NIX_PATH}"
    # NIX_PATH="nixpkgs=/nix/store/qk1q2rwq9qzhi49hx7whji90bqk8kf9y-nixpkgs-7ae9da426924537755ce9164fd5b5f81ce16a1c3-src:${NIX_PATH}"
    NIX_PATH="${NIX_PATH}:ssh-config-file=${HOME}/.ssh/config:ssh-auth-sock=${SSH_AUTH_SOCK}"
    export SSL_CERT_FILE=/Users/matt/.nix-profile/etc/ssl/certs/ca-bundle.crt
    export GIT_SSL_CAINFO=$SSL_CERT_FILE
fi
# [ -f ~/.gpg-agent-info ] && source ~/.gpg-agent-info
# if [ -S "${GPG_AGENT_INFO%%:*}" ]; then
#   export GPG_AGENT_INFO
# else
#   eval $( gpg-agent --daemon --write-env-file ~/.gpg-agent-info )
