#### matt's .zshrc #############################################################gg

systype=$(uname -s)
EXTERNAL="${ZDOTDIR:-$HOME}/dotfiles/external"

function join {
    local strs=( "$@" )
    echo ${(j<:>)strs}
}

## prezto
if [[ -s "$EXTERNAL/zprezto/init.zsh" ]]; then
  source "$EXTERNAL/zprezto/init.zsh"
fi

if [[ "$TERM" == 'dumb' ]]; then
  PROMPT='%2~ %% '
fi

## z -- fast directory navigation
. $EXTERNAL/z/z.sh

# use emacs keybindings
bindkey -e

# set terminal type
export TERM=xterm-256color
export LANG='en_US.UTF-8'
export LC_ALL='en_US.UTF-8'

setopt correctall
setopt autocd
setopt auto_resume
setopt completealiases
setopt kshglob
setopt completeinword
setopt no_beep
unsetopt caseglob

autoload -U colors && colors
autoload -U promptinit && promptinit

zstyle ':completion:*:descriptions' format '%U%B%d%b%u'
zstyle ':completion:*:warnings' format '%BSorry, no matches for: %d%b'

# history
HISTFILE=~/.zsh-history
HISTSIZE=100000
SAVEHIST=100000
setopt APPEND_HISTORY

## Completions
autoload -U compinit
compinit -C

## case-insensitive (all),partial-word and then substring completion
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' \
    'r:|[._-]=* r:|=*' 'l:|=* r:|=*'

#### Aliases ###################################################################

## emacs ##
export EDITOR="emacsclient"
export ALTERNATE_EDITOR="emacs"
export GIT_EDITOR="emacs -nw -Q"
export VISUAL="emacs"

alias emacs="emacs -nw"
alias em="emacsclient -t"
alias qem="emacs -Q -nw"
alias nano="qem"

# unfuck irssi scrolling
alias irssi='TERM=screen-256color irssi'

alias .='cd ../'
alias ..='cd ../../'
alias ...='cd ../../../'
alias ....='cd ../../../../'
alias .....='cd ../../../../../'
alias ......='cd ../../../../../../'

alias pu='pushd'
alias po='popd'

alias fuck='sudo $(history -p \!\!)'
alias damnit='sudo $(history -p \!\!)'
alias fucking='sudo $1'
alias die='killall'
alias fuckoff='killall -KILL'

alias hist='history | cut -c8- | sort | uniq -c | sort -rn | head'
alias ducks='du -cks * |sort -rn |head -11'
alias sl='ls'

# cats - cat with syntax highlighting
function pygmentize_cat {
    for arg in "$@"; do
        pygmentize -g "${arg}" 2> /dev/null || cat "${arg}"
    done
}
## check that pygmentize is installed, then alias cats
command -v pygmentize > /dev/null && alias cats=pygmentize_cat

# toggle hdpi magnification on linux
if [[ $systype == "Linux" ]]; then
    function toggle_hdpi_display {
        local dpi=-1
        ((dpi=$(xfconf-query -c xsettings -p /Xft/DPI) == -1 ? 150 : -1 ))
        xfconf-query -c xsettings -p /Xft/DPI -s $dpi
    }
fi

#### Paths #####################################################################

#export MITSCHEME_LIBRARY_PATH=/Applications/mit-scheme.app/Contents/Resources
#export MIT_SCHEME_EXE=/usr/local/scheme/
#export DYLD_LIBRARY_PATH=/opt/local/lib/:/opt/local/bin/lib

OPAM_BIN="$HOME/.opam/system/bin"
OCAML_TOPLEVEL_PATH="$HOME/.opam/system/lib/toplevel"
# CAML_LD_LIBRARY_PATH=$(join \
#                       "$HOME/.opam/system/lib/stublibs" \
#                       "/usr/lib/ocaml/stublibs" )
CABAL_BIN="$HOME/Library/Haskell/bin"
STACK_BIN="$HOME/.local/bin/:$HOME/.stack/programs/x86_64-osx/ghc-8.0.2/bin"

export MANPATH="/opt/local/share/man/:$MANPATH"
export INFOPATH="/opt/local/share/info/:$INFOPATH"

# export PKG_CONFIG_PATH=$(join                                    \
#                          '/usr/X11/lib/pkgconfig'               \
#                          '/usr/local/lib/pkgconfig'              \
#                          '/usr/local/opt/libxml2/lib/pkgconfig' \
#                          )

# TODO: guard this and only set it if it is set
NIX_PATH="$NIX_LINK/bin:$NIX_LINK/sbin"

if [[ $systype == "Darwin" ]]; then
   MAC_ONLY="/Library/Developer/:/opt/local/bin/:/usr/local/bin/:$HOME/bin/"
   RACKET_BIN="/Applications/Racket/bin"
elif [[ $systype == "Linux" ]]; then
   MAC_ONLY=""
   RACKET_BIN="/usr/local/racket/bin"
   export SSH_ASKPASS="/usr/bin/ksshaskpass"
   alias pbcopy='xsel --clipboard --input'
   alias pbpaste='xsel --clipboard --output'
fi

typeset -U path
path=(
    "/usr/local/bin/"
    "/usr/bin/"
    NIX_PATH
    $NVM_DIR
    $RACKET_BIN
    $OPAM_BIN
    $OCAML_TOPLEVEL_PATH
    $CAML_LD_LIBRARY_PATH
    $SCALA_HOME
    $TS_ACTIVATOR
    $STACK_BIN
    $CABAL_BIN
    "$GOPATH/bin"
    $MAC_ONLY
    $path
)
export PATH

# Load opam if installed
if (which opam &> /dev/null) && [[ -s "$HOME/.opam/opam-init/init.zsh" ]]; then
    . "$HOME/.opam/opam-init/init.sh" > /dev/null 2> /dev/null || true
    eval `opam config env`
fi

# launch tmux
# if command -v tmux>/dev/null; then
#   [[ ! $TERM =~ screen ]] && [ -z $TMUX ] && exec tmux
# fi

# In order for gpg to find gpg-agent, gpg-agent must be running, and there must be an env
# variable pointing GPG to the gpg-agent socket. This little script, which must be sourced
# in your shell's init script (ie, .bash_profile, .zshrc, whatever), will either start
# gpg-agent or set up the GPG_AGENT_INFO variable if it's already running.

# Add the following to your shell init to set up gpg-agent automatically for every shell
# if [ -f ~/.gnupg/.gpg-agent-info ] && [ -n "$(pgrep gpg-agent)" ]; then
#     source ~/.gnupg/.gpg-agent-info
#     export GPG_AGENT_INFO
# else
#     eval $(gpg-agent --daemon ~/.gnupg/.gpg-agent-info)
# fi

if [ NIX_REMOTE="daemon" && -e $HOME/.nix-profile/etc/profile.d/nix.sh ]; then
    source $HOME/.nix-profile/etc/profile.d/nix.sh;
elif [ -e '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh' ]; then
 . '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh'
fi
