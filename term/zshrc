#### matt's .zshrc #############################################################

systype=$(uname -s)
EXTERNAL="${ZDOTDIR:-$HOME}/dotfiles/external"

function join {
    local strs=( "$@" )
    echo ${(j<:>)strs}
}

## prezto
if [[ -s "$EXTERNAL/zprezto/init.zsh" ]]; then
  source "$EXTERNAL/zprezto/init.zsh"
fi

if [[ "$TERM" == 'dumb' ]]; then
  PROMPT='%2~ %% '
## else
##   PROMPT="$PROMPT
## ${SSH_TTY:+"%F{9}%n%f%F{7}@%f%F{3}%m%f "}%F{4}$ "
fi

## z -- fast directory navigation
. $EXTERNAL/z/z.sh

# use emacs keybindings
bindkey -e

# set terminal type
export TERM=xterm-256color
export LANG='en_US.UTF-8'
export LC_ALL='en_US.UTF-8'

setopt correctall
setopt autocd
setopt auto_resume
setopt completealiases
setopt kshglob
setopt completeinword
setopt no_beep
unsetopt caseglob

autoload -U colors && colors
autoload -U promptinit && promptinit

zstyle ':completion:*:descriptions' format '%U%B%d%b%u'
zstyle ':completion:*:warnings' format '%BSorry, no matches for: %d%b'

# history
HISTFILE=~/.zsh-history
HISTSIZE=100000
SAVEHIST=100000
setopt APPEND_HISTORY

## Completions
autoload -U compinit
compinit -C

## case-insensitive (all),partial-word and then substring completion
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' \
    'r:|[._-]=* r:|=*' 'l:|=* r:|=*'

#### Aliases ###################################################################

## emacs ##
export EDITOR="emacsclient"
export ALTERNATE_EDITOR="emacs"
export GIT_EDITOR="emacs -nw -Q"
export VISUAL="emacs"

alias gemacs="emacs"
alias emacs="emacs -nw"
alias em="emacsclient -t"
alias qem="emacs -Q -nw"
alias nano="qem"

# unfuck irssi scrolling
alias irssi='TERM=screen-256color irssi'

alias .='cd ../'
alias ..='cd ../../'
alias ...='cd ../../../'
alias ....='cd ../../../../'
alias .....='cd ../../../../../'
alias ......='cd ../../../../../../'

alias pu='pushd'
alias po='popd'

alias fuck='sudo $(history -p \!\!)'
alias damnit='sudo $(history -p \!\!)'
alias fucking='sudo $1'
alias die='killall'
alias fuckoff='killall -KILL'

alias hist='history | cut -c8- | sort | uniq -c | sort -rn | head'
alias ducks='du -cks * |sort -rn |head -11'
alias sl='ls'

if [[ $systype == "Linux" ]]; then
   alias pbcopy='xsel --clipboard --input'
   alias pbpaste='xsel --clipboard --output'
fi

# cats - cat with syntax highlighting
function pygmentize_cat {
    for arg in "$@"; do
        pygmentize -g "${arg}" 2> /dev/null || cat "${arg}"
    done
}
## check that pygmentize is installed, then alias cats
command -v pygmentize > /dev/null && alias cats=pygmentize_cat

# toggle hdpi magnification on linux
if [[ $systype == "Linux" ]]; then
    function toggle_hdpi_display {
        local dpi=-1
        ((dpi=$(xfconf-query -c xsettings -p /Xft/DPI) == -1 ? 150 : -1 ))
        xfconf-query -c xsettings -p /Xft/DPI -s $dpi
    }
fi


# Load opam if installed
if (which opam &> /dev/null) && [[ -s "$HOME/.opam/opam-init/init.zsh" ]]; then
    . "$HOME/.opam/opam-init/init.sh" > /dev/null 2> /dev/null || true
    eval `opam config env`
fi

source .profile

# launch tmux
# if command -v tmux>/dev/null; then
#   [[ ! $TERM =~ screen ]] && [ -z $TMUX ] && exec tmux
# fi

# In order for gpg to find gpg-agent, gpg-agent must be running, and there must be an env
# variable pointing GPG to the gpg-agent socket. This little script, which must be sourced
# in your shell's init script (ie, .bash_profile, .zshrc, whatever), will either start
# gpg-agent or set up the GPG_AGENT_INFO variable if it's already running.

# Add the following to your shell init to set up gpg-agent automatically for every shell
# if [ -f ~/.gnupg/.gpg-agent-info ] && [ -n "$(pgrep gpg-agent)" ]; then
#     source ~/.gnupg/.gpg-agent-info
#     export GPG_AGENT_INFO
# else
#     eval $(gpg-agent --daemon ~/.gnupg/.gpg-agent-info)
# fi

findup () {
    local x=`pwd`
    while [ "$x" != "/" ] ; do
	      x=`dirname "$x"`
        find "$x" -maxdepth 1 -name release.nix
    done
    echo $x
}

deploy () {
    nix-deploy system --to $1.awake.cloud --switch --path $(nix-build --no-out-link --attr aws-ec2-minimal $(findup 'release.nix'))
}
