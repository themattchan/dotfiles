#### matt's .zshrc #############################################################

systype=$(uname -s)

function join {
    local strs=( "$@" )
    echo ${(j<:>)strs}
}

## prezto
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# set emacs keybindings
bindkey -e

# set the terminal type
export TERM=xterm-256color
export LANG=en_US.UTF-8

# Lets set some options
setopt correctall
setopt autocd
setopt auto_resume
setopt completealiases
setopt kshglob
setopt completeinword
setopt no_beep
unsetopt caseglob

# colors
autoload -U colors && colors
autoload -U promptinit && promptinit

# Set some ZSH styles
zstyle ':completion:*:descriptions' format '%U%B%d%b%u'
zstyle ':completion:*:warnings' format '%BSorry, no matches for: %d%b'

# history
HISTFILE=~/.zsh-history
HISTSIZE=100000
SAVEHIST=100000
setopt APPEND_HISTORY

## Completions
autoload -U compinit
compinit -C

## case-insensitive (all),partial-word and then substring completion
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' \
    'r:|[._-]=* r:|=*' 'l:|=* r:|=*'

#### Aliases ###################################################################

## emacs ##
export EDITOR="emacsclient"
export ALTERNATE_EDITOR="emacs"
export GIT_EDITOR="emacs -nw -Q"
export VISUAL="emacs"

alias emacs="emacs -nw"
alias em="emacsclient -t"
alias qem="emacs -Q -nw"
alias nano="qem"

# unfuck irssi scrolling
alias irssi='TERM=screen-256color irssi'

# cd, because typing the backslash is A LOT of work!!
alias .='cd ../'
alias ..='cd ../../'
alias ...='cd ../../../'
alias ....='cd ../../../../'
alias .....='cd ../../../../../'
alias ......='cd ../../../../../../'

alias pu='pushd'
alias po='popd'

alias fuck='sudo $(history -p \!\!)'
alias damnit='sudo $(history -p \!\!)'
alias fucking='sudo $1'
alias die='killall'
alias fuckoff='killall -KILL'

alias hist='history | cut -c8- | sort | uniq -c | sort -rn | head'
alias ducks='du -cks * |sort -rn |head -11'
alias sl='ls'

# cats - cat with syntax highlighting
function pygmentize_cat {
    for arg in "$@"; do
    pygmentize -g "${arg}" 2> /dev/null || /bin/cat "${arg}"
    done
}
## check that pygmentize is installed, then alias cats
command -v pygmentize > /dev/null && alias cats=pygmentize_cat


#### Paths #####################################################################

#export MITSCHEME_LIBRARY_PATH=/Applications/mit-scheme.app/Contents/Resources
#export MIT_SCHEME_EXE=/usr/local/scheme/
#export DYLD_LIBRARY_PATH=/opt/local/lib/:/opt/local/bin/lib

OPAM_BIN="$HOME/.opam/system/bin/"
OCAML_TOPLEVEL_PATH="$HOME/.opam/system/lib/toplevel/"
CAML_LD_LIBRARY_PATH=$(join \
                      "$HOME/.opam/system/lib/stublibs" \
                      "/usr/lib/ocaml/stublibs/" )
CABAL_BIN="$HOME/Library/Haskell/bin/"
STACK_BIN="$HOME/.local/bin/"
ANDROID_HOME="$HOME/Library/Android/sdk/"

export CLASSPATH="$HOME/.jars/:."
SCALA_HOME="/Library/Scala/"
TS_ACTIVATOR="$HOME/activator/"

export MANPATH="/opt/local/share/man/:$MANPATH"
export INFOPATH="/opt/local/share/info/:$INFOPATH"
export PKG_CONFIG_PATH=$(join                                    \
                         '/usr/X11/lib/pkgconfig/'               \
                         '/usr/local/lib/pkgconfig'              \
                         '/usr/local/opt/libxml2/lib/pkgconfig/' \
                         )

if [[ $systype == "Darwin" ]]; then
    MAC_ONLY=$(join                 \
               "/Library/Developer" \
               "/opt/local/bin"     \          # macports
               "/opt/local/sbin"    \
            )
    RACKET_BIN="/Applications/Racket/bin/"
elif [[ $systype == "Linux" ]]; then
    MAC_ONLY=""
    RACKET_BIN="/usr/local/racket/bin"
fi

typeset -U path
path=(
    $RACKET_BIN
    $OPAM_BIN
    $OCAML_TOPLEVEL_PATH
    $CAML_LD_LIBRARY_PATH
    $SCALA_HOME
    $TS_ACTIVATOR
    $CABAL_BIN
    $STACK_BIN
    $MAC_ONLY
    $path
)
export PATH

# Load opam if installed
if [[ -s "$HOME/.opam/opam-init/init.zsh" ]]; then
    . "$HOME/.opam/opam-init/init.sh" > /dev/null 2> /dev/null || true
    eval `opam config env`
fi

# launch tmux
# if command -v tmux>/dev/null; then
#   [[ ! $TERM =~ screen ]] && [ -z $TMUX ] && exec tmux
# fi
